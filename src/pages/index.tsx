import Head from 'next/head'
import { Inter } from 'next/font/google'
import React, { Suspense } from 'react'
import { Canvas, useLoader } from '@react-three/fiber'
import { MapControls } from '@react-three/drei'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import {Box, Path, Content, Svg} from '../styles/Styles'


const line1 = "M0 0L350 0L400 50L400 400L50 400L0 350Z";

const inter = Inter({ subsets: ['latin'] })

function Model() {

  const gltf = useLoader(GLTFLoader, './base_map.glb');

  const rotation = [0, Math.PI / 4, 0]; // Rotar 90 grados en el eje Y
  const position = [0, 0, 0]; // Posicionar en el centro de la escena

  return <primitive object={gltf.scene} scale={4} rotation={rotation} position={position} />;
}


export default function Home() {

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        
        <Canvas orthographic camera={{ position: [0, 250, 0], zoom: 10 }}>
          <color attach="background" args={['#252530']} />
          <ambientLight />
          <hemisphereLight intensity={0.125} color="#8040df" groundColor="red" />
          <spotLight castShadow color="orange" intensity={2} position={[-50, 50, 40]} angle={0.25} penumbra={1} shadow-mapSize={[128, 128]} shadow-bias={0.00005} />
          <gridHelper args={[1000, 100, '#151515', '#020202']} position={[0, 1, 0]} />
          <pointLight position={[10, 100, 10]} />
          <Suspense fallback={null}>
            <Model />
          </Suspense>
          <MapControls
            minZoom={10}
            maxZoom={15}
            enableDamping
            dampingFactor={0.05}
            minPolarAngle={Math.PI / 4}
            maxPolarAngle={Math.PI / 3}
            minAzimuthAngle={Math.PI / 5}
            maxAzimuthAngle={Math.PI / 3}
            addEventListener={undefined}
            hasEventListener={undefined}
            removeEventListener={undefined}
            dispatchEvent={undefined}
            onEnd={e => {
              if (e === undefined) return;
              e.target.target.x > 300 ? e.target.target.x = 300 : null;
              e.target.target.x < -300 ? e.target.target.x = -300 : null;
              e.target.target.z > 300 ? e.target.target.z = 300 : null;
              e.target.target.z < -300 ? e.target.target.z = -300 : null;
              e.target.target.y > 300 ? e.target.target.y = 300 : null;
              e.target.target.y < -300 ? e.target.target.y = -300 : null;
            }}
          />
        </Canvas>
        <Content>
          <Suspense fallback={null}>
            <Box>Welcome</Box>
            <Svg
              version="1.1"
              id="Capa_1"
              xmlns="http://www.w3.org/2000/svg"
              x="0px"
              y="0px"
              viewBox="0 0 400 400"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 1 }}
            >
              <Path d={line1} />
            </Svg>
          </Suspense>
        </Content>

      </main>
    </>
  )
}